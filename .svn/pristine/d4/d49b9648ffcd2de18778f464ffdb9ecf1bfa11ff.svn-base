package com.cea.ehm.controller.manage;

import java.time.LocalDateTime;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.cea.ehm.bean.RuleComputation;
import com.cea.ehm.controller.BaseController;
import com.cea.ehm.service.RuleComputationService;
import com.github.miemiedev.mybatis.paginator.domain.PageBounds;
import com.github.miemiedev.mybatis.paginator.domain.PageList;
import com.google.common.base.Strings;
import com.google.common.collect.Maps;

/**
 * 计算规则
 */
@Controller
@RequestMapping(value = "/manage/rulecomputation")
public class RuleComputationController extends BaseController {
	private Logger logger = Logger.getLogger(RuleComputationController.class);
	@Autowired
	private RuleComputationService rulecomputationService;

	/**
	 * 显示计算规则列表页面
	 */
	@RequestMapping(value = "/rulecomputationlist.do")
	public ModelAndView rulecomputationlist() {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("/manage/rulecomputation/rulecomputationlist");
		return mv;
	}

	/**
	 * 查询计算规则→ 列表
	 * 
	 * @param reqPara
	 * @return
	 */
	@RequestMapping(value = "/list.do")
	@ResponseBody
	public Map<String, Object> list(@RequestParam Map<String, String> reqPara) {
		logger.info("页面请求参数: " + reqPara);
		PageBounds pageBounds = handlePageInfoForManage(reqPara);
		String sEcho = reqPara.get("draw");
		// 条件参数
		// String key = reqPara.get("key");
		Map<String, String> paramMap = Maps.newHashMap();
		// paramMap.put("weather", key);

		PageList<RuleComputation> pageList = (PageList<RuleComputation>) rulecomputationService
				.getRuleComputationList(paramMap, pageBounds);

		Pageable page = new PageRequest(pageBounds.getPage(), pageBounds.getLimit());
		Page<RuleComputation> content = new PageImpl<>(pageList, page, pageList.getPaginator().getTotalCount());

		Map<String, Object> map = Maps.newHashMap();
		map.put("data", pageList);
		map.put("iTotalRecords", content.getTotalElements());
		map.put("iTotalDisplayRecords", content.getTotalElements());
		map.put("sEcho", sEcho);
		map.put("draw", sEcho);
		return map;
	}

	/**
	 * 保存计算规则信息
	 * 
	 * @param reqPara
	 * @return
	 */
	@RequestMapping(value = "/save.do")
	@ResponseBody
	public Map<String, Object> save(@RequestParam Map<String, String> reqPara) {
		RuleComputation ruleComputation = getRuleComputation(reqPara);
		rulecomputationService.save(ruleComputation);
		return getSuccessMessage();
	}

	/**
	 * 更新计算规则信息
	 * 
	 * @param reqPara
	 * @return
	 */
	@RequestMapping(value = "/update.do")
	@ResponseBody
	public Map<String, Object> update(@RequestParam Map<String, String> reqPara) {
		RuleComputation ruleComputation = getRuleComputation(reqPara);
		rulecomputationService.update(ruleComputation);
		return getSuccessMessage();
	}

	/**
	 * 删除计算规则信息
	 * 
	 * @param reqPara
	 * @return
	 */
	@RequestMapping(value = "/delete.do")
	@ResponseBody
	public Map<String, Object> delete(@RequestParam Map<String, String> reqPara) {
		logger.info("待删除计算规则信息: " + reqPara);
		String id = reqPara.get("id");
		RuleComputation rulecomputation = new RuleComputation();
		rulecomputation.setId(Integer.parseInt(id));
		rulecomputationService.delete(rulecomputation);
		return getSuccessMessage();
	}

	/**
	 * 获取计算规则信息
	 * 
	 * @param reqPara
	 * @return
	 */
	public RuleComputation getRuleComputation(Map<String, String> reqPara) {
		logger.info("待编辑计算规则信息: " + reqPara);
		String id = reqPara.get("id");
		String inspectionId = reqPara.get("inspectionId");
		String type = reqPara.get("type");
		String ruleId = reqPara.get("ruleId");
		String maxVal = reqPara.get("maxVal");
		String minVal = reqPara.get("minVal");

		RuleComputation rulecomputation = new RuleComputation();
		if (!Strings.isNullOrEmpty(id)) {
			rulecomputation.setId(Integer.parseInt(id));
		}
		rulecomputation.setInspectionId(Integer.parseInt(inspectionId));
		rulecomputation.setType(Integer.parseInt(type));
		rulecomputation.setRuleId(Integer.parseInt(ruleId));
		rulecomputation.setMaxVal(maxVal);
		rulecomputation.setMinVal(minVal);
		String date = LocalDateTime.now().toString().replace("T", " ");
		String ctime = date.substring(0, date.indexOf("."));
		rulecomputation.setCtime(ctime);
		return rulecomputation;
	}
}
