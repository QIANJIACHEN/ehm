package com.cea.ehm.controller.manage;

import java.time.LocalDateTime;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.cea.ehm.bean.RuleParameter;
import com.cea.ehm.controller.BaseController;
import com.cea.ehm.service.RuleParameterService;
import com.github.miemiedev.mybatis.paginator.domain.PageBounds;
import com.github.miemiedev.mybatis.paginator.domain.PageList;
import com.google.common.base.Strings;
import com.google.common.collect.Maps;

/**
 * 规则参数
 */
@Controller
@RequestMapping(value = "/manage/ruleparameter")
public class RuleParameterController extends BaseController {
	private Logger logger = Logger.getLogger(RuleParameterController.class);
	@Autowired
	private RuleParameterService ruleparameterService;

	/**
	 * 显示规则参数列表页面
	 */
	@RequestMapping(value = "/ruleparameterlist.do")
	public ModelAndView ruleparameterlist() {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("/manage/ruleparameter/ruleparameterlist");
		return mv;
	}

	/**
	 * 查询规则参数→ 列表
	 * 
	 * @param reqPara
	 * @return
	 */
	@RequestMapping(value = "/list.do")
	@ResponseBody
	public Map<String, Object> list(@RequestParam Map<String, String> reqPara) {
		logger.info("页面请求参数: " + reqPara);
		PageBounds pageBounds = handlePageInfoForManage(reqPara);
		String sEcho = reqPara.get("draw");
		// 条件参数
		// String key = reqPara.get("key");
		Map<String, String> paramMap = Maps.newHashMap();
		// paramMap.put("weather", key);

		PageList<RuleParameter> pageList = (PageList<RuleParameter>) ruleparameterService.getRuleParameterList(paramMap,
				pageBounds);

		Pageable page = new PageRequest(pageBounds.getPage(), pageBounds.getLimit());
		Page<RuleParameter> content = new PageImpl<>(pageList, page, pageList.getPaginator().getTotalCount());

		Map<String, Object> map = Maps.newHashMap();
		map.put("data", pageList);
		map.put("iTotalRecords", content.getTotalElements());
		map.put("iTotalDisplayRecords", content.getTotalElements());
		map.put("sEcho", sEcho);
		map.put("draw", sEcho);
		return map;
	}

	/**
	 * 保存规则参数信息
	 * 
	 * @param reqPara
	 * @return
	 */
	@RequestMapping(value = "/save.do")
	@ResponseBody
	public Map<String, Object> savee(@RequestParam Map<String, String> reqPara) {
		RuleParameter ruleParameter = getRuleParameter(reqPara);
		ruleparameterService.save(ruleParameter);
		return getSuccessMessage();
	}

	/**
	 * 更新规则参数信息
	 * 
	 * @param reqPara
	 * @return
	 */
	@RequestMapping(value = "/saveOrUpdate.do")
	@ResponseBody
	public Map<String, Object> saveOrUpdate(@RequestParam Map<String, String> reqPara) {
		RuleParameter ruleParameter = getRuleParameter(reqPara);
		ruleparameterService.update(ruleParameter);
		return getSuccessMessage();
	}

	/**
	 * 删除规则参数信息
	 * 
	 * @param reqPara
	 * @return
	 */
	@RequestMapping(value = "/delete.do")
	@ResponseBody
	public Map<String, Object> delete(@RequestParam Map<String, String> reqPara) {
		String id = reqPara.get("id");
		RuleParameter ruleparameter = new RuleParameter();
		ruleparameter.setId(Integer.parseInt(id));
		ruleparameterService.delete(ruleparameter);
		return null;
	}

	/**
	 * 获取规则参数信息
	 * 
	 * @param reqPara
	 * @return
	 */
	public RuleParameter getRuleParameter(Map<String, String> reqPara) {
		logger.info("待编辑规则参数信息: " + reqPara);
		String id = reqPara.get("id");
		String parentId = reqPara.get("parentId");
		String type = reqPara.get("type");
		String val = reqPara.get("val");
		String annotation = reqPara.get("annotation");
		String isCalculate = reqPara.get("isCalculate");

		RuleParameter ruleparameter = new RuleParameter();
		if (!Strings.isNullOrEmpty(id)) {
			ruleparameter.setId(Integer.parseInt(id));
		}
		ruleparameter.setParentId(Integer.parseInt(parentId));
		ruleparameter.setType(Integer.parseInt(type));
		ruleparameter.setVal(val);
		ruleparameter.setAnnotation(annotation);
		String date = LocalDateTime.now().toString().replace("T", " ");
		String ctime = date.substring(0, date.indexOf("."));
		ruleparameter.setCtime(ctime);
		ruleparameter.setIsCalculate(Integer.parseInt(isCalculate));

		return ruleparameter;
	}
}
