package com.cea.ehm.controller.manage;

import java.text.ParseException;
import java.time.LocalDateTime;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.cea.ehm.bean.RuleInspection;
import com.cea.ehm.controller.BaseController;
import com.cea.ehm.service.RuleInspectionService;
import com.github.miemiedev.mybatis.paginator.domain.PageBounds;
import com.github.miemiedev.mybatis.paginator.domain.PageList;
import com.google.common.base.Strings;
import com.google.common.collect.Maps;

/**
 * 监测规则信息
 */
@Controller
@RequestMapping(value = "/manage/ruleinspection")
public class RuleInspectionController extends BaseController {
	private Logger logger = Logger.getLogger(RuleInspectionController.class);
	@Autowired
	private RuleInspectionService ruleinspectionService;

	/**
	 * 显示监测规则列表页面
	 */
	@RequestMapping(value = "/ruleinspectionlist.do")
	public ModelAndView ruleinspectionlist() {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("/manage/ruleinspection/ruleinspectionlist");
		return mv;
	}

	/**
	 * 查询监测规则→ 列表
	 * 
	 * @param reqPara
	 * @return
	 */
	@RequestMapping(value = "/list.do")
	@ResponseBody
	public Map<String, Object> list(@RequestParam Map<String, String> reqPara) {
		logger.info("页面请求参数: " + reqPara);
		PageBounds pageBounds = handlePageInfoForManage(reqPara);
		String sEcho = reqPara.get("draw");
		Map<String, String> paramMap = Maps.newHashMap();

		PageList<RuleInspection> pageList = (PageList<RuleInspection>) ruleinspectionService
				.getRuleInspectionList(paramMap, pageBounds);

		Pageable page = new PageRequest(pageBounds.getPage(), pageBounds.getLimit());
		Page<RuleInspection> content = new PageImpl<>(pageList, page, pageList.getPaginator().getTotalCount());

		Map<String, Object> map = Maps.newHashMap();
		map.put("data", pageList);
		map.put("iTotalRecords", content.getTotalElements());
		map.put("iTotalDisplayRecords", content.getTotalElements());
		map.put("sEcho", sEcho);
		map.put("draw", sEcho);
		return map;
	}

	/**
	 * 保存或更新监测规则信息
	 * 
	 * @param reqPara
	 * @return
	 * @throws ParseException
	 */
	@RequestMapping(value = "/saveOrUpdate.do")
	@ResponseBody
	public Map<String, Object> saveOrUpdate(@RequestParam Map<String, String> reqPara) throws ParseException {
		logger.info("待编辑信息: " + reqPara);
		String id = reqPara.get("id");
		String name = reqPara.get("name");
		String userId = reqPara.get("userId");
		String type = reqPara.get("type");
		String content = reqPara.get("content");
		String engSeries = reqPara.get("engSeries");
		String engType = reqPara.get("engType");
		String engModel = reqPara.get("engModel");
		String engConfig = reqPara.get("engConfig");
		String orderId = reqPara.get("orderId");

		RuleInspection ruleinspection = new RuleInspection();
		if (Strings.isNullOrEmpty(id)) {
			ruleinspection.setId(Integer.parseInt(id));
		}
		ruleinspection.setName(name);
		ruleinspection.setUserId(Integer.parseInt(userId));
		ruleinspection.setType(Integer.parseInt(type));
		ruleinspection.setContent(content);
		ruleinspection.setEngSeries(engSeries);
		ruleinspection.setEngType(engType);
		ruleinspection.setEngModel(engModel);
		ruleinspection.setEngConfig(engConfig);
		ruleinspection.setOrderId(Integer.parseInt(orderId));
		String date = LocalDateTime.now().toString().replace("T", " ");
		String ctime = date.substring(0, date.indexOf("."));
		ruleinspection.setCtime(ctime);
		ruleinspectionService.saveOrUpdate(ruleinspection);
		return getSuccessMessage();
	}

	/**
	 * 删除监测规则信息
	 * 
	 * @param reqPara
	 * @return
	 */
	@RequestMapping(value = "/delete.do")
	@ResponseBody
	public Map<String, Object> delete(@RequestParam Map<String, String> reqPara) {
		String id = reqPara.get("id");
		RuleInspection ruleinspection = new RuleInspection();
		ruleinspection.setId(Integer.parseInt(id));
		ruleinspectionService.delete(ruleinspection);
		return null;
	}

}
