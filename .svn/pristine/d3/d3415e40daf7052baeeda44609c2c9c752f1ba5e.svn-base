package com.cea.ehm.controller.manage;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.cea.ehm.bean.DataCfmPerformance;
import com.cea.ehm.controller.BaseController;
import com.cea.ehm.service.DataCfmPerformanceService;
import com.github.miemiedev.mybatis.paginator.domain.PageBounds;
import com.github.miemiedev.mybatis.paginator.domain.PageList;
import com.google.common.base.Strings;
import com.google.common.collect.Maps;

/**
 * 发动机性能数据
 */
@Controller
@RequestMapping(value = "/manage/datacfmperformance")
public class DataCfmPerformanceController extends BaseController {
	private Logger logger = Logger.getLogger(DataCfmPerformanceController.class);
	@Autowired
	private DataCfmPerformanceService datacfmperformanceService;

	/**
	 * 显示发动机性能数据列表页面
	 */
	@RequestMapping(value = "/datacfmperformancelist.do")
	public ModelAndView datacfmperformancelist() {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("/manage/datacfmperformance/datacfmperformancelist");
		return mv;
	}

	/**
	 * 显示发动机性能数据表页面
	 */
	@RequestMapping(value = "/cmfreport.do")
	public ModelAndView cmfreport() {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("/manage/datacfmperformance/cmfreport");
		return mv;
	}

	/**
	 * 显示发动机性能数据表页面 双发性能报表
	 */
	@RequestMapping(value = "/performanceimagereport.do")
	public ModelAndView performancereport() {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("/manage/datacfmperformance/performanceimagereport");
		return mv;
	}

	/**
	 * 显示发动机性能数据表E页面 双发DFF报表
	 */
	@RequestMapping(value = "/dffimagereport.do")
	public ModelAndView dffreport() {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("/manage/datacfmperformance/dffimagereport");
		return mv;
	}

	/**
	 * 显示发动机性能数据表页面 双发DEGT报表
	 */
	@RequestMapping(value = "/degtimagereport.do")
	public ModelAndView degtreport() {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("/manage/datacfmperformance/degtimagereport");
		return mv;
	}

	/**
	 * 显示发动机性能数据表页面 双发EGTM报表
	 */
	@RequestMapping(value = "/egtmimagereport.do")
	public ModelAndView egtmreport() {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("/manage/datacfmperformance/egtmimagereport");
		return mv;
	}

	/**
	 * 显示发动机性能数据表页面 双发DCS报表
	 */
	@RequestMapping(value = "/dcsimagereport.do")
	public ModelAndView dcsreport() {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("/manage/datacfmperformance/dcsimagereport");
		return mv;
	}

	/**
	 * 显示发动机性能数据表页面 双发滑压报表
	 */
	@RequestMapping(value = "/zpoimagereport.do")
	public ModelAndView zporeport() {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("/manage/datacfmperformance/zpoimagereport");
		return mv;
	}

	/**
	 * 查询发动机性能数据→ 列表
	 * 
	 * @param reqPara
	 * @return
	 */
	@RequestMapping(value = "/list.do")
	@ResponseBody
	public Map<String, Object> list(@RequestParam Map<String, String> reqPara) {
		logger.info("页面请求参数: " + reqPara);
		PageBounds pageBounds = handlePageInfoForManage(reqPara);
		String sEcho = reqPara.get("draw");
		// 条件参数
		Map<String, String> paramMap = Maps.newHashMap();
		PageList<DataCfmPerformance> pageList = (PageList<DataCfmPerformance>) datacfmperformanceService
				.getDataCfmPerformanceList(paramMap, pageBounds);
		Pageable page = new PageRequest(pageBounds.getPage(), pageBounds.getLimit());
		Page<DataCfmPerformance> content = new PageImpl<>(pageList, page, pageList.getPaginator().getTotalCount());
		Map<String, Object> map = Maps.newHashMap();
		map.put("data", pageList);
		map.put("iTotalRecords", content.getTotalElements());
		map.put("iTotalDisplayRecords", content.getTotalElements());
		map.put("sEcho", sEcho);
		map.put("draw", sEcho);
		return map;
	}

	/**
	 * 保存发动机性能数据信息
	 * 
	 * @param reqPara
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/save.do")
	@ResponseBody
	public Map<String, Object> save(@RequestParam Map<String, String> reqPara, HttpServletRequest request) {
		DataCfmPerformance dataCfmPerformance = getDataCfmPerformance(reqPara, request);
		datacfmperformanceService.save(dataCfmPerformance);
		return getSuccessMessage();
	}

	/**
	 * 更新发动机性能数据信息
	 * 
	 * @param reqPara
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/update.do")
	@ResponseBody
	public Map<String, Object> update(@RequestParam Map<String, String> reqPara, HttpServletRequest request) {
		DataCfmPerformance dataCfmPerformance = getDataCfmPerformance(reqPara, request);
		datacfmperformanceService.update(dataCfmPerformance);
		return getSuccessMessage();
	}

	/**
	 * 删除发动机性能数据信息
	 * 
	 * @param reqPara
	 * @return
	 */
	@RequestMapping(value = "/delete.do")
	@ResponseBody
	public Map<String, Object> delete(@RequestParam Map<String, String> reqPara) {
		String id = reqPara.get("id");
		DataCfmPerformance datacfmperformance = new DataCfmPerformance();
		datacfmperformance.setId(Integer.parseInt(id));
		datacfmperformanceService.delete(datacfmperformance);
		return getSuccessMessage();
	}

	/**
	 * excel 表格导出
	 * 
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/export.do")
	@ResponseBody
	public String export(HttpServletResponse response) throws Exception {
		/**
		 * 实现页面下载框
		 */
		ByteArrayOutputStream os = new ByteArrayOutputStream();
		datacfmperformanceService.createExcel().write(os);

		byte[] content = os.toByteArray();
		InputStream is = new ByteArrayInputStream(content);
		// 设置response参数，可以打开下载页面
		response.reset();
		response.setContentType("application/vnd.ms-excel;charset=utf-8");
		String fileName = "发动机性能数据.xlsx";
		response.setHeader("Content-Disposition",
				"attachment;filename=" + new String(fileName.getBytes(), "iso-8859-1"));
		ServletOutputStream out = response.getOutputStream();
		BufferedInputStream bis = null;
		BufferedOutputStream bos = null;
		try {
			bis = new BufferedInputStream(is);
			bos = new BufferedOutputStream(out);
			byte[] buff = new byte[2048];
			int bytesRead;
			// Simple read/write loop.
			while (-1 != (bytesRead = bis.read(buff, 0, buff.length))) {
				bos.write(buff, 0, bytesRead);
			}
		} catch (final IOException e) {
			logger.debug(e);
		} finally {
			if (bis != null)
				bis.close();
			if (bos != null)
				bos.close();
		}
		return null;
	}

	/**
	 * excel表格 一键上传 处理发动机性能数据
	 * 
	 * @param file
	 * @return
	 */
	@RequestMapping(value = "/inport.do")
	@ResponseBody
	public Map<String, Object> inport(MultipartFile file) {
		datacfmperformanceService.process(file);
		return getSuccessMessage();
	}

	/**
	 * 获取发动机性能数据信息
	 * 
	 * @param reqPara
	 * @param request
	 * @return
	 */
	public DataCfmPerformance getDataCfmPerformance(Map<String, String> reqPara, HttpServletRequest request) {
		logger.info("待编辑发动机性能数据信息: " + reqPara);

		String id = reqPara.get("id");
		String planeId = reqPara.get("planeId");
		String eposition = reqPara.get("eposition");
		String engId = reqPara.get("engId");
		String esn = reqPara.get("esn");
		String flightPhase = reqPara.get("flightPhase");
		String flightDateTime = reqPara.get("flightDateTime");
		String engineType = reqPara.get("engineType");
		String zphsr = reqPara.get("zphsr");
		String gpcn25Smoothed = reqPara.get("gpcn25Smoothed");
		String degtSmoothed = reqPara.get("degtSmoothed");
		String zphsf = reqPara.get("zphsf");
		String egthdmD = reqPara.get("egthdmD");
		String zvb1fSmoothed = reqPara.get("zvb1fSmoothed");
		String gwfm = reqPara.get("gwfm");
		String egthdm = reqPara.get("egthdm");
		String gwfmD = reqPara.get("gwfmD");
		String zvb1r = reqPara.get("zvb1r");
		String egthdmDSmoothed = reqPara.get("egthdmDSmoothed");
		String ztoil = reqPara.get("ztoil");
		String zvb2f = reqPara.get("zvb2f");
		String zvb2r = reqPara.get("zvb2r");
		String zvb1f = reqPara.get("zvb1f");
		String zvb2rSmoothed = reqPara.get("zvb2rSmoothed");
		String degtDSmoothed = reqPara.get("degtDSmoothed");
		String gpcn25D = reqPara.get("gpcn25D");
		String zvb1rSmoothed = reqPara.get("zvb1rSmoothed");
		String ztoilSmoothed = reqPara.get("ztoilSmoothed");
		String gwfmSmoothed = reqPara.get("gwfmSmoothed");
		String gpcn25 = reqPara.get("gpcn25");
		String gwfmDSmoothed = reqPara.get("gwfmDSmoothed");
		String gpcn25DSmoothed = reqPara.get("gpcn25DSmoothed");
		String zvb2fSmoothed = reqPara.get("zvb2fSmoothed");
		String zpoilSmoothed = reqPara.get("zpoilSmoothed");
		String egthdmSmoothed = reqPara.get("egthdmSmoothed");
		String degtD = reqPara.get("degtD");
		String zpoil = reqPara.get("zpoil");
		String zt49 = reqPara.get("zt49");
		String degt = reqPara.get("degt");

		DataCfmPerformance datacfmperformance = new DataCfmPerformance();
		if (!Strings.isNullOrEmpty(id)) {
			datacfmperformance.setId(Integer.parseInt(id));
		}
		datacfmperformance.setPlaneId(Integer.parseInt(planeId));
		@SuppressWarnings("unchecked")
		Map<Integer, String> planesMap = (Map<Integer, String>) request.getSession().getAttribute("planesMap");
		datacfmperformance.setTail(planesMap.get(datacfmperformance.getPlaneId()));
		datacfmperformance.setEposition(eposition);
		datacfmperformance.setEngId(Integer.parseInt(engId));
		datacfmperformance.setEsn(esn);
		datacfmperformance.setFlightPhase(flightPhase);
		datacfmperformance.setFlightDateTime(flightDateTime);
		datacfmperformance.setEngineType(engineType);
		datacfmperformance.setZphsr(zphsr);
		datacfmperformance.setGpcn25Smoothed(gpcn25Smoothed);
		datacfmperformance.setDegtSmoothed(degtSmoothed);
		datacfmperformance.setZphsf(zphsf);
		datacfmperformance.setEgthdmD(egthdmD);
		datacfmperformance.setZvb1fSmoothed(zvb1fSmoothed);
		datacfmperformance.setEgthdm(egthdm);
		datacfmperformance.setGwfm(gwfm);
		datacfmperformance.setGwfmD(gwfmD);
		datacfmperformance.setZvb1r(zvb1r);
		datacfmperformance.setEgthdmDSmoothed(egthdmDSmoothed);
		datacfmperformance.setZtoil(ztoil);
		datacfmperformance.setZvb2f(zvb2f);
		datacfmperformance.setZvb2r(zvb2r);
		datacfmperformance.setZvb1f(zvb1f);
		datacfmperformance.setZvb2rSmoothed(zvb2rSmoothed);
		datacfmperformance.setDegtDSmoothed(degtDSmoothed);
		datacfmperformance.setGpcn25D(gpcn25D);
		datacfmperformance.setZvb1rSmoothed(zvb1rSmoothed);
		datacfmperformance.setZtoilSmoothed(ztoilSmoothed);
		datacfmperformance.setGwfmSmoothed(gwfmSmoothed);
		datacfmperformance.setGpcn25(gpcn25);
		datacfmperformance.setGwfmDSmoothed(gwfmDSmoothed);
		datacfmperformance.setGpcn25DSmoothed(gpcn25DSmoothed);
		datacfmperformance.setZvb2fSmoothed(zvb2fSmoothed);
		datacfmperformance.setZpoilSmoothed(zpoilSmoothed);
		datacfmperformance.setEgthdmSmoothed(egthdmSmoothed);
		datacfmperformance.setDegtD(degtD);
		datacfmperformance.setZpoil(zpoil);
		datacfmperformance.setZt49(zt49);
		datacfmperformance.setDegt(degt);

		String date = LocalDateTime.now().toString().replace("T", " ");
		String ctime = date.substring(0, date.indexOf("."));
		datacfmperformance.setCtime(ctime);
		return datacfmperformance;
	}

	/**
	 * 获取所有发动机性能数据
	 * 
	 * @param reqPara
	 * @return
	 */
	@RequestMapping(value = "/all.do")
	@ResponseBody
	public Map<String, Object> all(@RequestParam Map<String, String> reqPara) {
		String tail = reqPara.get("tail");
		Map<String, String> paramMap = Maps.newHashMap();
		paramMap.put("tail", tail);
		List<DataCfmPerformance> performances = datacfmperformanceService.all(paramMap);
		return getSuccessData(performances, "");
	}
}
