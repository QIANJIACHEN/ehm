package com.cea.ehm.controller.manage;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.Date;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.cea.ehm.bean.RuleComputation;
import com.cea.ehm.controller.BaseController;
import com.cea.ehm.service.RuleComputationService;
import com.github.miemiedev.mybatis.paginator.domain.PageBounds;
import com.github.miemiedev.mybatis.paginator.domain.PageList;
import com.google.common.collect.Maps;

/**
 * 计算规则
 */
@Controller
@RequestMapping(value = "/manage/rulecomputation")
public class RuleComputationController extends BaseController {
	private Logger logger = Logger.getLogger(RuleComputationController.class);
	@Autowired
	private RuleComputationService rulecomputationService;

	/**
	 * 显示计算规则列表页面
	 */
	@RequestMapping(value = "/rulecomputationlist.do")
	public ModelAndView rulecomputationlist() {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("/manage/rulecomputation/rulecomputationlist");
		return mv;
	}
	
	/**
	 * 显示计算规则记录页面
	 */
	@RequestMapping(value = "/rulecomputationrecord.do")
	public ModelAndView rulecomputationrecord() {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("/manage/rulecomputation/rulecomputationrecord");
		return mv;
	}
	
	/**
	 * 显示计算规则信息页面
	 */
	@RequestMapping(value = "/rulecomputationinfo.do")
	public ModelAndView rulecomputationinfo() {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("/manage/rulecomputation/rulecomputationinfo");
		return mv;
	}

	/**
	 * 查询计算规则→ 列表
	 * 
	 * @param reqPara
	 * @return
	 */
	@RequestMapping(value = "/list.do")
	@ResponseBody
	public Map<String, Object> list(@RequestParam Map<String, String> reqPara) {
		logger.info("页面请求参数: " + reqPara);
		PageBounds pageBounds = handlePageInfoForManage(reqPara);
		// ？？
		String sEcho = reqPara.get("draw");
		// 条件参数
		//String key = reqPara.get("key");
		Map<String, String> paramMap = Maps.newHashMap();
		//paramMap.put("weather", key);

		PageList<RuleComputation> pageList = (PageList<RuleComputation>) rulecomputationService.getRuleComputationList(paramMap, pageBounds);

		Pageable page = new PageRequest(pageBounds.getPage(), pageBounds.getLimit());
		Page<RuleComputation> content = new PageImpl<>(pageList, page, pageList.getPaginator().getTotalCount());

		Map<String, Object> map = Maps.newHashMap();
		map.put("data", pageList);
		map.put("iTotalRecords", content.getTotalElements());
		map.put("iTotalDisplayRecords", content.getTotalElements());
		map.put("sEcho", sEcho);
		map.put("draw", sEcho);
		return map;
	}

	/**
	 * 保存或更新计算规则信息
	 * 
	 * @param reqPara
	 * @return
	 * @throws ParseException 
	 */
	@RequestMapping(value = "/saveOrUpdate.do")
	@ResponseBody
	public Map<String, Object> saveOrUpdate(@RequestParam Map<String, String> reqPara) throws ParseException {
		logger.info("待编辑用户信息: " + reqPara);
		String id = reqPara.get("id");
		String inspectionId = reqPara.get("inspectionId");
		String type = reqPara.get("type");
		String ruleId = reqPara.get("ruleId");
		String maxVal = reqPara.get("maxVal");
		String minVal = reqPara.get("minVal");
		String date = LocalDateTime.now().toString().replace("T", " ");
		String c = date.substring(0, date.indexOf("."));
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
		Date ctime = sdf.parse(c);

		RuleComputation rulecomputation = new RuleComputation();
		rulecomputation.setId(id);
		rulecomputation.setInspectionId(inspectionId);
		rulecomputation.setType(type);
		rulecomputation.setRuleId(ruleId);
		rulecomputation.setMaxVal(maxVal);
		rulecomputation.setMinVal(minVal);
		rulecomputation.setCtime(ctime);
		rulecomputationService.saveOrUpdate(rulecomputation);
		return null;
	}

	/**
	 * 删除计算规则信息
	 * 
	 * @param reqPara
	 * @return
	 */
	@RequestMapping(value = "/delete.do")
	@ResponseBody
	public Map<String, Object> delete(@RequestParam Map<String, String> reqPara) {
		logger.info("待删除计算规则信息: " + reqPara);
		String id = reqPara.get("id");
		RuleComputation rulecomputation = new RuleComputation();
		rulecomputation.setId(id);

		// 删除之前是不是要判断计算规则是否存在？？

		// 这里没做判断, 直接删除
		rulecomputationService.delete(rulecomputation);
		return null;
	}
	
}
