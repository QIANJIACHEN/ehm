package com.cea.ehm.controller.manage;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.Date;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.cea.ehm.bean.DataCfmPerformance;
import com.cea.ehm.controller.BaseController;
import com.cea.ehm.service.DataCfmPerformanceService;
import com.github.miemiedev.mybatis.paginator.domain.PageBounds;
import com.github.miemiedev.mybatis.paginator.domain.PageList;
import com.google.common.collect.Maps;

/**
 * 故障信息
 */
@Controller
@RequestMapping(value = "/manage/datacfmperformance")
public class DataCfmPerformanceController extends BaseController {
	private Logger logger = Logger.getLogger(DataCfmPerformanceController.class);
	@Autowired
	private DataCfmPerformanceService datacfmperformanceService;
	/**
	 * 显示故障列表页面
	 */
	@RequestMapping(value = "/datacfmperformancelist.do")
	public ModelAndView datacfmperformancelist() {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("/manage/datacfmperformance/datacfmperformancelist");
		return mv;
	}
	
	/**
	 * 显示故障添加/编辑
	 */
	@RequestMapping(value = "/datacfmperformanceadd.do")
	public ModelAndView datacfmperformanceadd() {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("/manage/datacfmperformance/datacfmperformanceadd");
		return mv;
	}
	
	/**
	 * 显示故障信息页面
	 */
	@RequestMapping(value = "/datacfmperformanceinfo.do")
	public ModelAndView datacfmperformanceinfo() {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("/manage/datacfmperformance/datacfmperformanceinfo");
		return mv;
	}

	/**
	 * 查询故障→ 列表
	 * 
	 * @param reqPara
	 * @return
	 */
	@RequestMapping(value = "/list.do")
	@ResponseBody
	public Map<String, Object> list(@RequestParam Map<String, String> reqPara) {
		logger.info("页面请求参数: " + reqPara);
		PageBounds pageBounds = handlePageInfoForManage(reqPara);
		// ？？
		String sEcho = reqPara.get("draw");
		// 条件参数
		String key = reqPara.get("key");
		Map<String, String> paramMap = Maps.newHashMap();
		paramMap.put("name", key);

		PageList<DataCfmPerformance> pageList = (PageList<DataCfmPerformance>) datacfmperformanceService.getDataCfmPerformanceList(paramMap, pageBounds);

		Pageable page = new PageRequest(pageBounds.getPage(), pageBounds.getLimit());
		Page<DataCfmPerformance> content = new PageImpl<>(pageList, page, pageList.getPaginator().getTotalCount());

		Map<String, Object> map = Maps.newHashMap();
		map.put("data", pageList);
		map.put("iTotalRecords", content.getTotalElements());
		map.put("iTotalDisplayRecords", content.getTotalElements());
		map.put("sEcho", sEcho);
		map.put("draw", sEcho);
		return map;
	}

	/**
	 * 保存或更新故障信息
	 * 
	 * @param reqPara
	 * @return
	 * @throws ParseException 
	 */
	@RequestMapping(value = "/saveOrUpdate.do")
	@ResponseBody
	public Map<String, Object> saveOrUpdate(@RequestParam Map<String, String> reqPara) throws ParseException {
		logger.info("待编辑用户信息: " + reqPara);
		String id = reqPara.get("id");
		String tail = reqPara.get("tail");
		String eposition = reqPara.get("eposition");
		String esn = reqPara.get("esn");
		String flightPhase = reqPara.get("flightPhase");
		String flightDateTime = reqPara.get("flightDateTime");
		String engineType = reqPara.get("engineType");
		String zphsr = reqPara.get("zphsr");
		String gpcn25Smoothed = reqPara.get("gpcn25Smoothed");
		String degtSmoothed = reqPara.get("degtSmoothed");
		String zphsf = reqPara.get("zphsf");
		String egthdmD = reqPara.get("egthdmD");
		String zvb1fSmoothed = reqPara.get("zvb1fSmoothed");
		String gwfm = reqPara.get("gwfm");
		String egthdm = reqPara.get("egthdm");
		String gwfmD = reqPara.get("gwfmD");
		String zvb1r = reqPara.get("zvb1r");
		String egthdmDSmoothed = reqPara.get("egthdmDSmoothed");
		String ztoil = reqPara.get("ztoil");
		String zvb2f = reqPara.get("zvb2f");
		String zvb2r = reqPara.get("zvb2r");
		String zvb1f = reqPara.get("zvb1f");
		String zvb2rSmoothed = reqPara.get("zvb2rSmoothed");
		String degtDSmoothed = reqPara.get("degtDSmoothed");
		String gpcn25D = reqPara.get("gpcn25D");
		String zvb1rSmoothed = reqPara.get("zvb1rSmoothed");
		String ztoilSmoothed = reqPara.get("ztoilSmoothed");
		String gwfmSmoothed = reqPara.get("gwfmSmoothed");
		String gpcn25 = reqPara.get("gpcn25");
		String gwfmDSmoothed = reqPara.get("gwfmDSmoothed");
		String gpcn25DSmoothed = reqPara.get("gpcn25DSmoothed");
		String zvb2fSmoothed = reqPara.get("zvb2fSmoothed");
		String zpoilSmoothed = reqPara.get("zpoilSmoothed");
		String egthdmSmoothed = reqPara.get("egthdmSmoothed");
		String degtD = reqPara.get("degtD");
		String zpoil = reqPara.get("zpoil");
		String zt49 = reqPara.get("zt49");
		String degt = reqPara.get("degt");
		String date = LocalDateTime.now().toString().replace("T", " ");
		String c = date.substring(0, date.indexOf("."));
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Date ctime = sdf.parse(c);
		DataCfmPerformance datacfmperformance = new DataCfmPerformance();
		datacfmperformance.setId(id);
		datacfmperformance.setTail(tail);
		datacfmperformance.setEposition(eposition);
		datacfmperformance.setEsn(esn);
		datacfmperformance.setFlightPhase(flightPhase);
		datacfmperformance.setFlightDateTime(flightDateTime);
		datacfmperformance.setEngineType(engineType);
		datacfmperformance.setZphsr(zphsr);
		datacfmperformance.setGpcn25Smoothed(gpcn25Smoothed);
		datacfmperformance.setDegtSmoothed(degtSmoothed);
		datacfmperformance.setZphsf(zphsf);
		datacfmperformance.setEgthdmD(egthdmD);
		datacfmperformance.setZvb1fSmoothed(zvb1fSmoothed);
		datacfmperformance.setEgthdm(egthdm);
		datacfmperformance.setGwfm(gwfm);
		datacfmperformance.setGwfmD(gwfmD);
		datacfmperformance.setZvb1r(zvb1r);
		datacfmperformance.setEgthdmDSmoothed(egthdmDSmoothed);
		datacfmperformance.setZtoil(ztoil);
		datacfmperformance.setZvb2f(zvb2f);
		datacfmperformance.setZvb2r(zvb2r);
		datacfmperformance.setZvb1f(zvb1f);
		datacfmperformance.setZvb2rSmoothed(zvb2rSmoothed);
		datacfmperformance.setDegtDSmoothed(degtDSmoothed);
		datacfmperformance.setGpcn25D(gpcn25D);
		datacfmperformance.setZvb1rSmoothed(zvb1rSmoothed);
		datacfmperformance.setZtoilSmoothed(ztoilSmoothed);
		datacfmperformance.setGwfmSmoothed(gwfmSmoothed);
		datacfmperformance.setGpcn25(gpcn25);
		datacfmperformance.setGwfmDSmoothed(gwfmDSmoothed);
		datacfmperformance.setGpcn25DSmoothed(gpcn25DSmoothed);
		datacfmperformance.setZvb2fSmoothed(zvb2fSmoothed);
		datacfmperformance.setZpoilSmoothed(zpoilSmoothed);
		datacfmperformance.setEgthdmSmoothed(egthdmSmoothed);
		datacfmperformance.setDegtD(degtD);
		datacfmperformance.setZpoil(zpoil);
		datacfmperformance.setZt49(zt49);
		datacfmperformance.setDegt(degt);
		datacfmperformance.setCtime(ctime);
		datacfmperformanceService.saveOrUpdate(datacfmperformance);
		return null;
	}

	/**
	 * 删除故障信息
	 * 
	 * @param reqPara
	 * @return
	 */
	@RequestMapping(value = "/delete.do")
	@ResponseBody
	public Map<String, Object> delete(@RequestParam Map<String, String> reqPara) {
		logger.info("待删除故障信息: " + reqPara);
		String id = reqPara.get("id");
		DataCfmPerformance datacfmperformance = new DataCfmPerformance();
		datacfmperformance.setId(id);

		// 删除之前是不是要判断故障是否存在？？

		// 这里没做判断, 直接删除
		datacfmperformanceService.delete(datacfmperformance);
		return null;
	}
	
}

