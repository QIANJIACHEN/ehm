package com.cea.ehm.controller.manage;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.cea.ehm.bean.EngConditionFleet;
import com.cea.ehm.controller.BaseController;
import com.cea.ehm.service.EngConditionFleetService;
import com.github.miemiedev.mybatis.paginator.domain.PageBounds;
import com.github.miemiedev.mybatis.paginator.domain.PageList;
import com.google.common.collect.Maps;

/**
 * 发动机状态简报信息
 */
@Controller
@RequestMapping(value = "/manage/engconditionfleet")
public class EngConditionFleetController extends BaseController {
	private Logger logger = Logger.getLogger(EngConditionFleetController.class);
	@Autowired
	private EngConditionFleetService engconditionfleetService;

	/**
	 * 显示发动机状态简报列表页面
	 */
	@RequestMapping(value = "/engconditionfleetlist.do")
	public ModelAndView engconditionfleetlist() {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("/manage/engconditionfleet/engconditionfleetlist");
		return mv;
	}
	
	/**
	 * 显示发动机状态简报详情页面
	 */
	@RequestMapping(value = "/engconditionfleetdetail.do")
	public ModelAndView dataplanelistdetail() {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("/manage/engconditionfleet/engconditionfleetdetail");
		return mv;
	}
	
	/**
	 * 显示发动机状态简报记录页面
	 */
	@RequestMapping(value = "/engconditionfleetrecord.do")
	public ModelAndView engconditionfleetrecord() {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("/manage/engconditionfleet/engconditionfleetrecord");
		return mv;
	}
	

	/**
	 * 查询发动机状态简报→ 列表
	 * 
	 * @param reqPara
	 * @return
	 */
	@RequestMapping(value = "/list.do")
	@ResponseBody
	public Map<String, Object> list(@RequestParam Map<String, String> reqPara) {
		logger.info("页面请求参数: " + reqPara);
		PageBounds pageBounds = handlePageInfoForManage(reqPara);
		// ？？
		String sEcho = reqPara.get("draw");
		// 条件参数
		String key = reqPara.get("key");
		Map<String, String> paramMap = Maps.newHashMap();
		paramMap.put("engSn", key);

		PageList<EngConditionFleet> pageList = (PageList<EngConditionFleet>) engconditionfleetService.getEngConditionFleetList(paramMap, pageBounds);

		Pageable page = new PageRequest(pageBounds.getPage(), pageBounds.getLimit());
		Page<EngConditionFleet> content = new PageImpl<>(pageList, page, pageList.getPaginator().getTotalCount());

		Map<String, Object> map = Maps.newHashMap();
		map.put("data", pageList);
		map.put("iTotalRecords", content.getTotalElements());
		map.put("iTotalDisplayRecords", content.getTotalElements());
		map.put("sEcho", sEcho);
		map.put("draw", sEcho);
		return map;
	}

	/**
	 * 保存或更新发动机状态简报信息
	 * 
	 * @param reqPara
	 * @return
	 */
	@RequestMapping(value = "/saveOrUpdate.do")
	@ResponseBody
	public Map<String, Object> saveOrUpdate(@RequestParam Map<String, String> reqPara) {
		logger.info("待编辑用户信息: " + reqPara);
		String id = reqPara.get("id");
		String engId = reqPara.get("engId");
		String engSn = reqPara.get("engSn");
		String tsiStart = reqPara.get("tsiStart");
		String csiStart = reqPara.get("csiStart");
		String svTime = reqPara.get("svTime");
		String tsrStart = reqPara.get("tsrStart");
		String csrStart = reqPara.get("csrStart");
		String tsoStart = reqPara.get("tsoStart");
		String csoStart = reqPara.get("csoStart");
		String date = LocalDateTime.now().toString().replace("T", " ");
		String time = date.substring(0, date.indexOf("."));
		EngConditionFleet engconditionfleet = new EngConditionFleet();
		if(id!=null) {
			engconditionfleet.setId(Integer.parseInt(id));
		}
		
		engconditionfleet.setCtime(time);
		engconditionfleet.setEngId(Integer.parseInt(engId));
		engconditionfleet.setEngSn(engSn);
		engconditionfleet.setTsiStart(tsiStart);
		engconditionfleet.setCsiStart(csiStart);
		engconditionfleet.setSvTime(svTime);
		engconditionfleet.setTsrStart(tsrStart);
		engconditionfleet.setCsrStart(csrStart);
		engconditionfleet.setTsoStart(tsoStart);
		engconditionfleet.setCsoStart(csoStart);
		engconditionfleetService.saveOrUpdate(engconditionfleet);
		return null;
	}

	/**
	 * 删除发动机状态简报信息
	 * 
	 * @param reqPara
	 * @return
	 */
	@RequestMapping(value = "/delete.do")
	@ResponseBody
	public Map<String, Object> delete(@RequestParam Map<String, String> reqPara) {
		logger.info("待删除发动机状态简报信息: " + reqPara);
		String id = reqPara.get("id");
		EngConditionFleet engconditionfleet = new EngConditionFleet();
		engconditionfleet.setId(Integer.parseInt(id));

		// 删除之前是不是要判断发动机状态简报是否存在？？

		// 这里没做判断, 直接删除
		engconditionfleetService.delete(engconditionfleet);
		return null;
	}
	
	/**
	 * 详情
	 * @param reqPara
	 * @return
	 */
	@RequestMapping(value = "/info.do")
	@ResponseBody
	public Map<String, Object> info(@RequestParam Map<String, String> reqPara) {
		logger.info("页面请求参数: " + reqPara);
		Map<String, Integer> paramMap = Maps.newHashMap();

		// 根据id来查吧
		String id = reqPara.get("id");
		paramMap.put("id", Integer.parseInt(id));
		List<EngConditionFleet> data = engconditionfleetService.engconditionfleetinfo(paramMap);

		return getSuccessData(data, "");
	}
	
}
