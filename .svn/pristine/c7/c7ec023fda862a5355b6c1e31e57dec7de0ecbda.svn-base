package com.cea.ehm.controller.manage;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.cea.ehm.bean.DataEng;
import com.cea.ehm.bean.OilConsumption;
import com.cea.ehm.bean.User;
import com.cea.ehm.controller.BaseController;
import com.cea.ehm.service.OilConsumptionService;
import com.cea.ehm.util.ConstantUtil;
import com.github.miemiedev.mybatis.paginator.domain.PageBounds;
import com.github.miemiedev.mybatis.paginator.domain.PageList;
import com.google.common.base.Strings;
import com.google.common.collect.Maps;

/**
 * 滑油数据
 */
@Controller
@RequestMapping(value = "/manage/oilconsumption")
public class OilConsumptionController extends BaseController {
	private Logger logger = Logger.getLogger(OilConsumptionController.class);
	@Autowired
	private OilConsumptionService oilService;

	/**
	 * 显示滑油数据页面
	 */
	@RequestMapping(value = "/oillist.do")
	public ModelAndView oilList() {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("/manage/oilconsumption/oillist");
		return mv;
	}
	
	/**
	 * 显示滑油信息详情页面
	 */
	@RequestMapping(value = "/oildetail.do")
	public ModelAndView dataenglistdetail() {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("/manage/oilconsumption/oildetail");
		return mv;
	}

	/**
	 * 显示滑油健康报告
	 */
	@RequestMapping(value = "/oilreport.do")
	public ModelAndView report() {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("/manage/oilconsumption/oilreport");
		return mv;
	}

	/**
	 * 查询滑耗数据 → 列表
	 * 
	 * @param reqPara
	 * @return
	 */
	@PostMapping(value = "/list.do")
	@ResponseBody
	public Map<String, Object> list(@RequestParam Map<String, String> reqPara) {
		PageBounds pageBounds = handlePageInfoForManage(reqPara);
		String sEcho = reqPara.get("draw");
		// 条件参数
		Map<String, String> paramMap = Maps.newHashMap();
		String duty = reqPara.get("duty");
		String planeId = reqPara.get("planeId");
		if (!Strings.isNullOrEmpty(duty)) {
			paramMap.put("duty", duty);
		}
		if (!Strings.isNullOrEmpty(planeId)) {
			paramMap.put("planeId", planeId);
		}
		PageList<OilConsumption> pageList = (PageList<OilConsumption>) oilService.getList(paramMap, pageBounds);
		Pageable page = new PageRequest(pageBounds.getPage(), pageBounds.getLimit());
		Page<OilConsumption> content = new PageImpl<>(pageList, page, pageList.getPaginator().getTotalCount());
		Map<String, Object> map = Maps.newHashMap();
		map.put("data", pageList);
		map.put("iTotalRecords", content.getTotalElements());
		map.put("iTotalDisplayRecords", content.getTotalElements());
		map.put("sEcho", sEcho);
		map.put("draw", sEcho);
		return map;
	}

	/**
	 * 滑耗数据 保存
	 * 
	 * @param oil
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/save.do")
	@ResponseBody
	public Map<String, Object> save(OilConsumption oil, HttpServletRequest request) {
		@SuppressWarnings("unchecked")
		Map<Integer, String> planesMap = (Map<Integer, String>) request.getSession().getAttribute("planesMap");
		oil.setTail(planesMap.get(oil.getPlaneId()));
		User user = (User) request.getSession().getAttribute(ConstantUtil.SESSION_LOGIN_USER);
		int userId = 0;
		if (user != null) {
			userId = user.getUserId();
		}
		oil.setUserId(userId);
		String date = LocalDateTime.now().toString().replace("T", " ");
		String ctime = date.substring(0, date.indexOf("."));
		oil.setCtime(ctime);
		oilService.save(oil);
		return getSuccessMessage();
	}

	/**
	 * 滑耗数据 修改
	 * 
	 * @param oil
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/update.do")
	@ResponseBody
	public Map<String, Object> update(OilConsumption oil, HttpServletRequest request) {
		@SuppressWarnings("unchecked")
		Map<Integer, String> planesMap = (Map<Integer, String>) request.getSession().getAttribute("planesMap");
		oil.setTail(planesMap.get(oil.getPlaneId()));
		oilService.update(oil);
		return getSuccessMessage();
	}

	/**
	 * 滑耗数据 删除
	 * 
	 * @param reqPara
	 * @return
	 */
	@RequestMapping(value = "/delete.do")
	@ResponseBody
	public Map<String, Object> delete(@RequestParam Map<String, String> reqPara) {
		String id = reqPara.get("id");
		OilConsumption oil = new OilConsumption();
		oil.setId(Integer.parseInt(id));
		oilService.delete(oil);
		return getSuccessMessage();
	}

	/**
	 * excel 表格导出
	 * 
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/export.do")
	@ResponseBody
	public String export(HttpServletResponse response) throws Exception {
		/**
		 * 实现页面下载框
		 */
		ByteArrayOutputStream os = new ByteArrayOutputStream();
		oilService.createExcel().write(os);

		byte[] content = os.toByteArray();
		InputStream is = new ByteArrayInputStream(content);
		// 设置response参数，可以打开下载页面
		response.reset();
		response.setContentType("application/vnd.ms-excel;charset=utf-8");
		String fileName = "滑耗数据.xlsx";
		response.setHeader("Content-Disposition",
				"attachment;filename=" + new String(fileName.getBytes(), "iso-8859-1"));
		ServletOutputStream out = response.getOutputStream();
		BufferedInputStream bis = null;
		BufferedOutputStream bos = null;
		try {
			bis = new BufferedInputStream(is);
			bos = new BufferedOutputStream(out);
			byte[] buff = new byte[2048];
			int bytesRead;
			// Simple read/write loop.
			while (-1 != (bytesRead = bis.read(buff, 0, buff.length))) {
				bos.write(buff, 0, bytesRead);
			}
		} catch (final IOException e) {
			logger.debug(e);
		} finally {
			if (bis != null)
				bis.close();
			if (bos != null)
				bos.close();
		}
		return null;
	}

	/**
	 * excel表格 一键上传 处理水洗数据信息
	 * 
	 * @param file
	 * @return
	 */
	@RequestMapping(value = "/inport.do")
	@ResponseBody
	public Map<String, Object> inport(MultipartFile file) {
		oilService.process(file);
		return getSuccessMessage();
	}
	
	/**
	 * 根据id获取发动机信息
	 * @param reqPara
	 * @return
	 */
	@RequestMapping(value = "/info.do")
	@ResponseBody
	public Map<String, Object> info(@RequestParam Map<String, String> reqPara) {
		logger.info("页面请求参数: " + reqPara);
		Map<String, String> paramMap = Maps.newHashMap();
		
		//根据engSn来查吧
		String id = reqPara.get("id");
		paramMap.put("id", id);
		List<OilConsumption> data = oilService.oilInfo(paramMap);
		
		return getSuccessData(data, "");
	}
}
