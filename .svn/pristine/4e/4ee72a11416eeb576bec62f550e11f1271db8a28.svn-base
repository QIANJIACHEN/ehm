package com.cea.ehm.controller.manage;

import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.cea.ehm.bean.Hptb;
import com.cea.ehm.bean.HptbHistory;
import com.cea.ehm.controller.BaseController;
import com.cea.ehm.service.HptbService;
import com.github.miemiedev.mybatis.paginator.domain.PageBounds;
import com.github.miemiedev.mybatis.paginator.domain.PageList;
import com.google.common.collect.Maps;

@Controller
@RequestMapping(value = "/manage/hptb")
public class HptbController  extends BaseController{
	@Autowired
	HptbService hptbservice;
	
	@RequestMapping(value = "/activity.do")
	public ModelAndView activitytable() {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("/manage/hptb/activity");
		return mv;
	}
	
	@RequestMapping(value = "/activityinfo.do")
	@ResponseBody
	public Map<String, Object> activityinfo(@RequestParam Map<String, String> ReqData){
		PageBounds pageBounds = handlePageInfoForManage(ReqData);
		String sEcho = ReqData.get("draw");
		String key = ReqData.get("key");
		Map<String, String> paramMap = Maps.newHashMap();
		PageList<Hptb> pageList =  (PageList<Hptb>) hptbservice.hptbinfo(paramMap, pageBounds);
		Pageable page = new PageRequest(pageBounds.getPage(), pageBounds.getLimit());
		Page<Hptb> content = new PageImpl<>(pageList, page, pageList.getPaginator().getTotalCount());
		Map<String, Object> map = Maps.newHashMap();
		map.put("data", pageList);
		map.put("iTotalRecords", content.getTotalElements());
		map.put("iTotalDisplayRecords", content.getTotalElements());
		map.put("sEcho", sEcho);
		map.put("draw", sEcho);
		return map;
	}
	@RequestMapping(value="/activitydelete.do")
	@ResponseBody
	public void activitydelete(@RequestParam Map<String, String> ReqData) {
		Integer id = Integer.parseInt(ReqData.get("id"));
		Hptb hptb = new Hptb();
		hptb.setId(id);
		hptbservice.hptbdelete(hptb);
	}
	@RequestMapping(value="/activityaddupdate.do")
	@ResponseBody
	public void activityaddupdate(@RequestParam Map<String, String> reqData) {
		Integer type = Integer.parseInt(reqData.get("type"));
		Integer id = 0;
		if(type == 1) {
			id = Integer.parseInt(reqData.get("id"));
		};
		Integer onDate = Integer.parseInt(reqData.get("onDate"));
		Integer onEtsn = Integer.parseInt(reqData.get("onEtsn"));
		Integer onEcsn = Integer.parseInt(reqData.get("onEcsn"));
		Integer onPtsn = Integer.parseInt(reqData.get("onPtsn"));
		Integer onPcsn = Integer.parseInt(reqData.get("onPcsn"));
		String engSn = reqData.get("engSn");
		String hptbPn = reqData.get("hptbPn");
		String hptbSn = reqData.get("hptbSn");
		String engPn = reqData.get("engPn");
		String limitSpecial = reqData.get("limitSpecial");
		String code = reqData.get("code");
		String remark = reqData.get("remark");
		Hptb hptb = new Hptb();
		if(type == 1) {
			hptb.setId(id);
		};
		hptb.setEngPn(engPn);
		hptb.setEngSn(engSn);
		hptb.setOnEcsn(onEcsn);
		hptb.setOnEtsn(onEtsn);
		hptb.setOnDate(onDate);
		hptb.setOnPcsn(onPcsn);
		hptb.setOnPtsn(onPtsn);
		hptb.setLimitSpecial(limitSpecial);
		hptb.setCode(code);
		hptb.setRemark(remark);
		hptb.setHptbPn(hptbPn);
		hptb.setHptbSn(hptbSn);
		if(type == 1) {
			hptbservice.hptbupdate(hptb);
		}else {
			hptbservice.hptbadd(hptb);
		}
	}
	
	
	@RequestMapping(value="/history.do")
	public ModelAndView history() {
		 ModelAndView mv = new ModelAndView();
		 mv.setViewName("/manage/hptb/history");
		 return mv;
	}
	@RequestMapping(value="/historyInfo.do")
	@ResponseBody
	public Map<String, Object> historyInfo(@RequestParam Map<String, String> reqData){
		PageBounds pageBounds = handlePageInfoForManage(reqData);
		String sEcho = reqData.get("draw");
		String key = reqData.get("key");
		Map<String, String> paramMap = Maps.newHashMap();
		PageList<HptbHistory> pageList =  (PageList<HptbHistory>) hptbservice.historyinfo(paramMap, pageBounds);
		Pageable page = new PageRequest(pageBounds.getPage(), pageBounds.getLimit());
		Page<HptbHistory> content = new PageImpl<>(pageList, page, pageList.getPaginator().getTotalCount());
		Map<String, Object> map = Maps.newHashMap();
		map.put("data", pageList);
		map.put("iTotalRecords", content.getTotalElements());
		map.put("iTotalDisplayRecords", content.getTotalElements());
		map.put("sEcho", sEcho);
		map.put("draw", sEcho);
		return map;
	}
	@RequestMapping(value = "historyaddupdate.do")
	@ResponseBody
	public void historyaddupdate(@RequestParam Map<String, String> reqData) {
		Integer type = Integer.parseInt(reqData.get("type"));
		Integer id = 0;
		if(type == 1) {
			id = Integer.parseInt(reqData.get("id"));
		};
		Integer onDate = Integer.parseInt(reqData.get("onDate"));
		Integer onEtsn = Integer.parseInt(reqData.get("onEtsn"));
		Integer onEcsn = Integer.parseInt(reqData.get("onEcsn"));
		Integer onPtsn = Integer.parseInt(reqData.get("onPtsn"));
		Integer onPcsn = Integer.parseInt(reqData.get("onPcsn"));
		String engSnUsed = reqData.get("engSnUsed");
		String hptbPn = reqData.get("hptbPn");
		String hptbSn = reqData.get("hptbSn");
		String engPn = reqData.get("engPn");
		String limitSpecial = reqData.get("limitSpecial");
		String code = reqData.get("code");
		String remark = reqData.get("remark");
		HptbHistory hptbHistory = new HptbHistory ();
		if(type == 1) {
			hptbHistory.setId(id);
		};
		hptbHistory.setEngPn(engPn);
		hptbHistory.setEngSnUsed(engSnUsed);
		hptbHistory.setOnEcsn(onEcsn);
		hptbHistory.setOnEtsn(onEtsn);
		hptbHistory.setOnDate(onDate);
		hptbHistory.setOnPcsn(onPcsn);
		hptbHistory.setOnPtsn(onPtsn);
		hptbHistory.setLimitSpecial(limitSpecial);
		hptbHistory.setCode(code);
		hptbHistory.setRemark(remark);
		hptbHistory.setHptbPn(hptbPn);
		hptbHistory.setHptbSn(hptbSn);
		if(type == 1) {
			hptbservice.historyupdate(hptbHistory);
		}else {
			hptbservice.historyadd(hptbHistory);
		}
	}
}
